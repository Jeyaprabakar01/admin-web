# Cursor AI Rules for Cerberus IAM Admin Web

## Project Context
You are working on a Next.js 16 (Pages Router) Identity and Access Management admin portal with TypeScript, React 19, Tailwind CSS 4, and Shadcn/ui components.

## Critical Architecture Patterns

### Page Layout Pattern
When creating pages that need the AppLayout:
1. Import `NextPageWithLayout` from `@/types/page` (never define inline)
2. Type the page component as `NextPageWithLayout`, not `NextPage`
3. Implement `getLayout` that returns `ReactElement`

```typescript
import type { NextPageWithLayout } from "@/types/page";
import { type ReactElement } from "react";
import { AppLayout } from "@/components/layout/app-layout";

const MyPage: NextPageWithLayout = () => {
  return <div>Content</div>;
};

MyPage.getLayout = function getLayout(page: ReactElement) {
  return (
    <AppLayout title="Page Title" description="Description">
      {page}
    </AppLayout>
  );
};

export default MyPage;
```

### IAM Permission System
Use the type-safe permission system:
- Build keys: `buildPermissionKey("users", "create")` returns `"users:create"`
- Check permissions: `hasPermission(userPermissions, ["users:read", "users:create"])`
- Resolve user permissions: `resolveUserPermissions(user, roles)`

### Import Patterns
Always use path aliases:
```typescript
import { Button } from "@/components/ui/button";
import type { IAMUser } from "@/types/iam";
import { buildPermissionKey } from "@/lib/iam";
```

## Code Style Requirements

### Forms with Zod
Never use `.default()` on boolean fields - it causes type mismatches:
```typescript
// ✓ Correct
rememberMe: z.boolean()

// ✗ Wrong - causes resolver type errors
rememberMe: z.boolean().default(false)
```

### Conditional Rendering
Use ternary operators for optional unknown types:
```typescript
// ✓ Correct
{metadata?.value ? <span>{String(metadata.value)}</span> : null}

// ✗ Wrong - causes "Type 'unknown' is not assignable to ReactNode"
{metadata?.value && <span>{String(metadata.value)}</span>}
```

### React Hook Form Watch
Suppress React Compiler warning when using `watch()`:
```typescript
// eslint-disable-next-line react-hooks/incompatible-library
const password = form.watch("password");
```

### setState in useEffect
Avoid synchronous setState in useEffect (React Compiler error):
```typescript
// ✓ Correct
useEffect(() => {
  const timer = setTimeout(() => setState(true), 0);
  return () => clearTimeout(timer);
}, []);

// ✗ Wrong - React Compiler error
useEffect(() => {
  setState(true);
}, []);
```

## Testing Guidelines

### Test File Locations
- Unit tests: Colocated with source (e.g., `utils.test.ts`)
- Component tests: Next to components (e.g., `Button.test.tsx`)
- E2E tests: In `e2e/` directory (e.g., `login.spec.ts`)

### Running Tests
```bash
npm test                    # Jest unit/integration tests
npm run test:watch          # Jest watch mode
npm run test:e2e:ui         # Playwright interactive mode
jest path/to/file.test.ts   # Run specific Jest test
npx playwright test file.spec.ts  # Run specific e2e test
```

## Component Guidelines

### Shadcn/ui Components
- Never modify files in `src/components/ui/` directly
- Regenerate with: `npx shadcn@latest add <component-name>`
- Customize via Tailwind classes or CVA variants

### Component Structure
```typescript
// Use cn() for conditional classes
import { cn } from "@/lib/utils";

<div className={cn("base-classes", condition && "conditional-classes")} />
```

## TypeScript Requirements
- Strict mode is enabled - no implicit any
- ESLint runs with `--max-warnings=0` - all warnings are errors
- Always provide explicit types for function parameters and returns when ambiguous

## Pre-commit Checks
Every commit runs:
1. `eslint --fix` on TypeScript/JavaScript files
2. `prettier --write` on all files
3. Blocks if ESLint fails

Ensure code passes `npm run lint` before committing.

## Development Commands
```bash
npm run dev              # Start dev server
npm run build            # Production build (type checks)
npm run lint             # Run ESLint
npm run format:fix       # Fix formatting
npm test                 # Run all tests
```

## Reference Files
- Architecture details: See `CLAUDE.md`
- Testing patterns: See `TESTING.md`
- Setup info: See `README.md`
